{"version":3,"sources":["components.js/compA.js","components.js/navBar.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["CompA","state","react_default","a","createElement","Component","NavbarPage","isOpen","toggleCollapse","_this","setState","mdbreact_esm","color","dark","expand","className","onClick","this","id","navbar","left","active","react_router_dom","to","style","Styles","item","right","nav","caret","href","waves","type","placeholder","aria-label","padding","App","react_router","exact","path","component","MyNavBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.ed36e0e3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass CompA extends Component {\r\n    state = {}\r\n    render() {\r\n        return (<div> <h1>Compnent A</h1></div>);\r\n    }\r\n}\r\n\r\nexport default CompA;","import React, { Component } from \"react\";\r\nimport {\r\n  MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavItem, MDBNavLink, MDBNavbarToggler, MDBCollapse, MDBFormInline,\r\n  MDBDropdown, MDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem\r\n} from \"mdbreact\";\r\nimport { BrowserRouter, Link } from 'react-router-dom';\r\nclass NavbarPage extends Component {\r\n  state = {\r\n    isOpen: false\r\n  };\r\n\r\n  toggleCollapse = () => {\r\n    this.setState({ isOpen: !this.state.isOpen });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <MDBNavbar color=\"indigo\" dark expand=\"md\">\r\n        <MDBNavbarBrand>\r\n          <strong className=\"white-text\">Navbar</strong>\r\n        </MDBNavbarBrand>\r\n        <MDBNavbarToggler onClick={this.toggleCollapse} />\r\n        <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.isOpen} navbar>\r\n          <MDBNavbarNav left>\r\n            <MDBNavItem active>\r\n              <Link to=\"/\"> <span style={Styles.item}>Home</span>  </Link>\r\n            </MDBNavItem>\r\n            <MDBNavItem>\r\n              <Link to=\"/\"><span style={Styles.item}>Home</span> </Link>\r\n            </MDBNavItem>\r\n            <MDBNavItem>\r\n              <Link to=\"/\"><span style={Styles.item}>Home</span> </Link>\r\n            </MDBNavItem>\r\n\r\n          </MDBNavbarNav>\r\n          <MDBNavbarNav right>\r\n            <MDBNavItem>\r\n              <MDBDropdown>\r\n                <MDBDropdownToggle nav caret>\r\n                  <span className=\"mr-2\">Dropdown</span>\r\n                </MDBDropdownToggle>\r\n                <MDBDropdownMenu>\r\n                  <MDBDropdownItem href=\"#!\">Action</MDBDropdownItem>\r\n                  <MDBDropdownItem href=\"#!\">Another Action</MDBDropdownItem>\r\n                  <MDBDropdownItem href=\"#!\">Something else here</MDBDropdownItem>\r\n                  <MDBDropdownItem href=\"#!\">Something else here</MDBDropdownItem>\r\n                </MDBDropdownMenu>\r\n              </MDBDropdown>\r\n            </MDBNavItem>\r\n            <MDBNavItem>\r\n              <MDBFormInline waves>\r\n                <div className=\"md-form my-0\">\r\n                  <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                </div>\r\n              </MDBFormInline>\r\n            </MDBNavItem>\r\n          </MDBNavbarNav>\r\n        </MDBCollapse>\r\n      </MDBNavbar>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavbarPage;\r\n\r\nconst Styles = {\r\n  item: {\r\n    color: \"white\",\r\n    padding: 30,\r\n  }\r\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CompA from './components.js/compA';\nimport { Route } from 'react-router-dom';\nimport MyNavBar from './components.js/navBar';\nimport { BrowserRouter as Router } from 'react-router-dom';\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n\n\n        <Route exact path=\"/\" component={MyNavBar} />\n        <Route exact path=\"/compA\" component={CompA} />\n\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}